// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SingleRowServiceTests.cs" company="">
//   Copyright 2015
// </copyright>
// <summary>
//   Autogenerated Web Services
// </summary>
// --------------------------------------------------------------------------------------------------------------------
namespace HyperWebApp1.Services.UnitTest
{
	using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Entities;
    using Repository;
    using global::HyperWebApp1.Repository.Pattern.Repositories;
      
	using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Moq;

	/// <summary>
    /// The singlerow unit tests.
    /// </summary>
    [TestClass]
    public class SingleRowServiceTests
    {
        private readonly Mock<ISingleRowRepository> singlerowRepository;
        private readonly SingleRowService singlerowService;
        public SingleRowServiceTests()
        {
            singlerowRepository = new Mock<ISingleRowRepository>();
            singlerowService = new SingleRowService(singlerowRepository.Object);
        }
        [TestMethod]
        public void Delete_With_ObjectId_Tests()
        {
            singlerowRepository.Setup(x => x.Delete(It.IsAny<object>()));
            singlerowService.Delete(1);
            singlerowRepository.VerifyAll();
        }

        [TestMethod]
        public void Delete_With_Entity_Tests()
        {
            singlerowRepository.Setup(x => x.Delete(It.IsAny<SingleRow>()));
            singlerowService.Delete(new SingleRow() { });
            singlerowRepository.VerifyAll();
        }

        [TestMethod]
        public void Queryable_Tests()
        {
            IQueryable<SingleRow> singlerow = null;
            singlerowRepository.Setup(x => x.Queryable()).Returns(singlerow);
            singlerowService.Queryable();
            singlerowRepository.VerifyAll();
        }

        [TestMethod]
        public void Insert_Entity_Tests()
        {
            singlerowRepository.Setup(x => x.Insert(It.IsAny<SingleRow>()));
            singlerowService.Insert(new SingleRow() { });
            singlerowRepository.VerifyAll();
        }

		[TestMethod]
        public void Update_Tests()
        {
            singlerowRepository.Setup(x => x.Update(It.IsAny<SingleRow>()));
            singlerowService.Update(new SingleRow() { });
            singlerowRepository.VerifyAll();
        }

        [TestMethod]
        public void UpdateRange_Tests()
        {
            IEnumerable<SingleRow> singlerow = null;
            singlerowRepository.Setup(x => x.UpdateRange(singlerow));
            singlerowService.UpdateRange(singlerow);
            singlerowRepository.VerifyAll();
        }  
	}

}
