<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="VisualStudioHelper.ttinclude" #>
<#@ include file="Manager.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#@ include file="T4Toolbox.tt" #>
<#
    var entityProjectName = "HyperWebApp1.Entities";
    var excludeNamespaces = new String[] {"HyperWebApp1.Entities.Mappings", "HyperWebApp1.Entities.Context","HyperWebApp1.Entities.Attributes"};
	List<string> namespaces = new List<string>();

    var entityProject = this.VisualStudioHelper.GetProject(entityProjectName);
    foreach(var ns in GetAllNamespacesFromProject(entityProject).OrderBy(s => s))
    {
        if (!namespaces.Contains(ns) && !namespaces.Any(n => ns.StartsWith(n)))
        {
            namespaces.Add(ns);
        }
    }

    // find the matching namespaces from the CodeModel
    List<EnvDTE.CodeNamespace> codeNamespaces = new List<EnvDTE.CodeNamespace>();

    //foreach(EnvDTE.Project project in VisualStudioHelper.GetAllProjects())

    var project = this.VisualStudioHelper.GetProject(entityProjectName);
    if (project.CodeModel != null && project.CodeModel.CodeElements != null)
    {
        foreach(EnvDTE.CodeNamespace codeNs in VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements,
                                                                                                        EnvDTE.vsCMElement.vsCMElementNamespace,
                                                                                                        true))
        {
            if (namespaces.Contains(codeNs.FullName) )
            {
                codeNamespaces.Add(codeNs);
            }
        }
    }
	        List<string> list =   WalkElementsRecursively(codeNamespaces.OfType<EnvDTE.CodeElement>(), 0, excludeNamespaces, entityProjectName, manager);
			var currentNameSpace = GetCurrentNameSpace();
			foreach (var item in list)
            {
				SampleServiceTemplate serviceTemplate = new SampleServiceTemplate(item, currentNameSpace, entityProjectName);	
				serviceTemplate.Output.File = @"ServiceTests\"+ item +"ServiceTests.cs";
				serviceTemplate.Output.Project = @"..\HyperWebApp1.Services.UnitTest\HyperWebApp1.Services.UnitTest.csproj";
				serviceTemplate.Render();
			}
#>
<#+
    public class SampleServiceTemplate : Template
    {
		public SampleServiceTemplate()
        {
			
        }
		string Name;
		string CurrentNameSpace;
		string EntityProjectName;
		public SampleServiceTemplate(string name, string nameSpace, string entityProjectName)
        {
			this.EntityProjectName = entityProjectName;
			this.CurrentNameSpace = nameSpace;
			this.Name = name;
        }				  
	
        public override string TransformText()
        {				
			Output.PreserveExistingFile = true;
#>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="<#= Name + "ServiceTests.cs"#>" company="">
//   Copyright 2015
// </copyright>
// <summary>
//   Autogenerated Web Services
// </summary>
// --------------------------------------------------------------------------------------------------------------------
namespace <#= CurrentNameSpace #>
{
	using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Entities;
    using Repository;
    using global::HyperWebApp1.Repository.Pattern.Repositories;
      
	using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Moq;

	/// <summary>
    /// The <#= Name.ToLower() #> unit tests.
    /// </summary>
    [TestClass]
    public class <#=Name#>ServiceTests
    {
        private readonly Mock<I<#=Name#>Repository> <#=Name.ToLower()#>Repository;
        private readonly <#=Name#>Service <#=Name.ToLower() #>Service;
        public <#=Name#>ServiceTests()
        {
            <#=Name.ToLower()#>Repository = new Mock<I<#=Name#>Repository>();
            <#=Name.ToLower() #>Service = new <#=Name#>Service(<#=Name.ToLower()#>Repository.Object);
        }
        [TestMethod]
        public void Delete_With_ObjectId_Tests()
        {
            <#=Name.ToLower()#>Repository.Setup(x => x.Delete(It.IsAny<object>()));
            <#=Name.ToLower() #>Service.Delete(1);
            <#=Name.ToLower()#>Repository.VerifyAll();
        }

        [TestMethod]
        public void Delete_With_Entity_Tests()
        {
            <#=Name.ToLower()#>Repository.Setup(x => x.Delete(It.IsAny<<#=Name#>>()));
            <#=Name.ToLower() #>Service.Delete(new <#=Name#>() { });
            <#=Name.ToLower()#>Repository.VerifyAll();
        }

        [TestMethod]
        public void Queryable_Tests()
        {
            IQueryable<<#=Name#>> <#=Name.ToLower()#> = null;
            <#=Name.ToLower()#>Repository.Setup(x => x.Queryable()).Returns(<#=Name.ToLower()#>);
            <#=Name.ToLower() #>Service.Queryable();
            <#=Name.ToLower()#>Repository.VerifyAll();
        }

        [TestMethod]
        public void Insert_Entity_Tests()
        {
            <#=Name.ToLower()#>Repository.Setup(x => x.Insert(It.IsAny<<#=Name#>>()));
            <#=Name.ToLower() #>Service.Insert(new <#=Name#>() { });
            <#=Name.ToLower()#>Repository.VerifyAll();
        }

		[TestMethod]
        public void Update_Tests()
        {
            <#=Name.ToLower()#>Repository.Setup(x => x.Update(It.IsAny<<#=Name#>>()));
            <#=Name.ToLower() #>Service.Update(new <#=Name#>() { });
            <#=Name.ToLower()#>Repository.VerifyAll();
        }

        [TestMethod]
        public void UpdateRange_Tests()
        {
            IEnumerable<<#=Name#>> <#=Name.ToLower()#> = null;
            <#=Name.ToLower()#>Repository.Setup(x => x.UpdateRange(<#=Name.ToLower()#>));
            <#=Name.ToLower() #>Service.UpdateRange(<#=Name.ToLower()#>);
            <#=Name.ToLower()#>Repository.VerifyAll();
        }  
	}

}
<#+
            return this.GenerationEnvironment.ToString();
        }
	}
//class
/// <summary>
/// Getting namespaces that are defined within a Visual Studio Project via the CodeModel is 
/// buggy, because their InfoLocation Property always returns "vsCMInfoLocationExternal".
/// This is why this method uses the file code model to retrieve namespaces. You can work with these
/// to get classes etc. from the CodeModel.
/// </summary>
public IEnumerable<string> GetAllNamespacesFromProject(EnvDTE.Project project)
{
    List<string> ret = new List<string>();

    // iterate all items contained in the given project
    foreach(EnvDTE.ProjectItem projectItem in VisualStudioHelper.GetAllProjectItems(project))
    {
        // make sure this item provides a file code model
        if (projectItem.FileCodeModel == null) continue;

        // find all code elements in this file
        foreach(EnvDTE.CodeElement elem in projectItem.FileCodeModel.CodeElements)
        {
            if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace)
                ret.Add(elem.FullName);
        }
    }

    return ret;
}

	public List<string> WalkElementsRecursively(IEnumerable<EnvDTE.CodeElement> elements, int recursionDepth, String[] excludeNamespaces, String entityProjectName, Manager manager)
{
	List<string> classNames = new List<string>();
    // iterate all elements
    foreach (EnvDTE.CodeElement element in elements)
    {
        // check if it contains any children
        // bear in mind that namespaces need to be treated differently
        // since their children are stored in the "Members"-Property
        bool hasChildren = false;
        IEnumerable<EnvDTE.CodeElement> children = null;
        if (element is EnvDTE.CodeNamespace)
        {
            try 
            { 
                if(!excludeNamespaces.Contains(element.FullName))
                {
                    children = (element as EnvDTE.CodeNamespace).Members.OfType<EnvDTE.CodeElement>();
                    hasChildren = (children.Count() > 0);
                }
            } catch { return new List<string>(); }
        }
        else
        {
            try 
            { 
                children = element.Children.OfType<EnvDTE.CodeElement>(); 
                hasChildren = (children.Count() > 0); 
            } catch { return new List<string>(); }
        }

        // create the visual elements for this item
        string itemName = "N/A";
        try
        {
            itemName = (element is EnvDTE.CodeNamespace) ? element.FullName : element.FullName.Split('.').Last();			
        } catch { return new List<string>(); }
		         
    if(element.Kind.ToString().Replace("vsCMElement", "")=="Class") 
    {
			classNames.Add(element.FullName.Split('.').Last().Replace("Repository", ""));
    } 
    // if there is content to be rendered unterneath,
    // use the recursion
    if (hasChildren)
    {
        List<string> list = WalkElementsRecursively(children, recursionDepth + 1, excludeNamespaces, entityProjectName, manager);
		foreach (var item in list)
            {
				classNames.Add(item);
            }
    }
   
  }
  return classNames;
}

/// <summary>
/// Getting the current namespace in the project and returning the namespace
/// </summary>
public string GetCurrentNameSpace()
{
	var visualStudio = (this.Host as IServiceProvider).GetService(typeof( EnvDTE.DTE)) as EnvDTE.DTE;
    var currentProject = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
    return currentProject.Properties.Item("DefaultNamespace").Value.ToString();
}

#>